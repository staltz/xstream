<!-- This EXTRA_DOCS.md file is automatically generated from source code and files in the /markdown directory. Please DO NOT send pull requests to directly modify this file. Instead, edit the JSDoc comments in source code or the md files in /markdown or the md.ejs files in /tools. -->

## Extras
<? docfiles.forEach(function(doc) { ?><? doc.javadoc.forEach(function(comment) { ?><? if (!comment.ignore && comment.raw.tags.findIndex(o => o.type === 'factory') >= 0) { ?><? if (comment.name) { ?>
- [`<?= comment.name ?>`](#<?= comment.name ?>) (factory)<? } ?><? } ?><? if (!comment.ignore && comment.raw.tags.findIndex(o => o.type === 'factory') === -1) { ?><? if (comment.name) { ?>
- [`<?= comment.name ?>`](#<?= comment.name ?>) (operator)<? } ?><? } ?><? }) ?><? }) ?>

# How to use extras

The following are standalone stream operators and stream factories that may be separately imported and utilized in your project.
To use an extra operator (e.g. `delay`), import it as such:

```js
import xs from 'xstream'
import delay from 'xstream/extra/delay'

const inputStream = xs.of(1, 2, 3, 4)
const outputStream = inputStream.compose(delay(500))
```

To import and use an extra factory (e.g. `fromEvent`), import it as such:

```js
import fromEvent from 'xstream/extra/fromEvent'

const clickStream = fromEvent(document, 'click')
```

- - -

<? docfiles.forEach(function(doc) { ?>
  <? doc.javadoc.forEach(function(comment) { ?>
    <? if (!comment.ignore && comment.name) { ?>
      <? if (comment.isMethod || comment.isFunction) { ?>
        ### <a id="<?= comment.name ?>"></a> `<?= comment.name ?>(<?= comment.paramStr ?>)`
      <? } else { ?>
        ### <a id="<?= comment.name ?>"></a> `<?= comment.name ?>`
      <? } ?>

      <?= comment.description ?>

      <? if (comment.deprecated) { ?>
        **Deprecated**
      <? } ?>

      <? if (comment.see) { ?>
        See: <?= comment.see ?>
      <? } ?>

      <? if (comment.paramTags.length > 0) { ?>
        #### Arguments:
        <? comment.paramTags.forEach(function(paramTag) { ?>
          - `<?= paramTag.name ?><? if (paramTag.joinedTypes) { ?>: <?= paramTag.joinedTypes.replace('.', '') ?><? } ?>`<? if (paramTag.description) { ?> <?= paramTag.description ?><? } ?><? }) ?>
      <? } ?>

      <? if (comment.returnTags.length > 0) { ?>
        #### Returns: <? comment.returnTags.forEach(function(returnTag) { ?> <?= returnTag.joinedTypes ?> <?= returnTag.description ?><? }) ?>
      <? } ?>
      - - -
    <? } ?>
  <? }) ?>
<? }) ?>
